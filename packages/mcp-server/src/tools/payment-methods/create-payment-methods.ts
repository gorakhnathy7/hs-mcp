// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'payment_methods',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/payment_methods',
  operationId: 'Create a Payment Method',
};

export const tool: Tool = {
  name: 'create_payment_methods',
  description:
    'Creates and stores a payment method against a customer.\nIn case of cards, this API should be used only by PCI compliant merchants.',
  inputSchema: {
    type: 'object',
    properties: {
      payment_method: {
        type: 'string',
        description: "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
        enum: [
          'card',
          'card_redirect',
          'pay_later',
          'wallet',
          'bank_redirect',
          'bank_transfer',
          'crypto',
          'bank_debit',
          'reward',
          'real_time_payment',
          'upi',
          'voucher',
          'gift_card',
          'open_banking',
          'mobile_payment',
        ],
      },
      bank_transfer: {
        $ref: '#/$defs/bank',
      },
      billing: {
        $ref: '#/$defs/address',
      },
      card: {
        $ref: '#/$defs/card_detail',
      },
      card_network: {
        type: 'string',
        description: 'The card network',
      },
      client_secret: {
        type: 'string',
        description:
          'For Client based calls, SDK will use the client_secret\nin order to call /payment_methods\nClient secret will be generated whenever a new\npayment method is created',
      },
      customer_id: {
        type: 'string',
        description: 'The unique identifier of the customer.',
      },
      metadata: {
        type: 'object',
        description:
          'You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.',
      },
      payment_method_data: {
        type: 'object',
        properties: {
          card: {
            $ref: '#/$defs/card_detail',
          },
        },
        required: ['card'],
      },
      payment_method_issuer: {
        type: 'string',
        description: 'The name of the bank/ provider issuing the payment method to the end user',
      },
      payment_method_issuer_code: {
        $ref: '#/$defs/payment_method_issuer_code',
      },
      payment_method_type: {
        $ref: '#/$defs/payment_method_type',
      },
      wallet: {
        $ref: '#/$defs/wallet',
      },
    },
    $defs: {
      bank: {
        anyOf: [
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              bank_routing_number: {
                type: 'string',
                description: '[9 digits] Routing number - used in USA for identifying a specific bank.',
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bank_account_number', 'bank_routing_number'],
          },
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              bank_sort_code: {
                type: 'string',
                description:
                  "[6 digits] Sort Code - used in UK and Ireland for identifying a bank and it's branches.",
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bank_account_number', 'bank_sort_code'],
          },
          {
            type: 'object',
            properties: {
              bic: {
                type: 'string',
                description:
                  "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
              },
              iban: {
                type: 'string',
                description:
                  "International Bank Account Number (iban) - used in many countries for identifying a bank along with it's customer.",
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bic', 'iban'],
          },
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              pix_key: {
                type: 'string',
                description: 'Unique key for pix customer',
              },
              bank_branch: {
                type: 'string',
                description: 'Bank branch',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
              tax_id: {
                type: 'string',
                description: 'Individual taxpayer identification number',
              },
            },
            required: ['bank_account_number', 'pix_key'],
          },
        ],
      },
      country_alpha2: {
        type: 'string',
        enum: [
          'AF',
          'AX',
          'AL',
          'DZ',
          'AS',
          'AD',
          'AO',
          'AI',
          'AQ',
          'AG',
          'AR',
          'AM',
          'AW',
          'AU',
          'AT',
          'AZ',
          'BS',
          'BH',
          'BD',
          'BB',
          'BY',
          'BE',
          'BZ',
          'BJ',
          'BM',
          'BT',
          'BO',
          'BQ',
          'BA',
          'BW',
          'BV',
          'BR',
          'IO',
          'BN',
          'BG',
          'BF',
          'BI',
          'KH',
          'CM',
          'CA',
          'CV',
          'KY',
          'CF',
          'TD',
          'CL',
          'CN',
          'CX',
          'CC',
          'CO',
          'KM',
          'CG',
          'CD',
          'CK',
          'CR',
          'CI',
          'HR',
          'CU',
          'CW',
          'CY',
          'CZ',
          'DK',
          'DJ',
          'DM',
          'DO',
          'EC',
          'EG',
          'SV',
          'GQ',
          'ER',
          'EE',
          'ET',
          'FK',
          'FO',
          'FJ',
          'FI',
          'FR',
          'GF',
          'PF',
          'TF',
          'GA',
          'GM',
          'GE',
          'DE',
          'GH',
          'GI',
          'GR',
          'GL',
          'GD',
          'GP',
          'GU',
          'GT',
          'GG',
          'GN',
          'GW',
          'GY',
          'HT',
          'HM',
          'VA',
          'HN',
          'HK',
          'HU',
          'IS',
          'IN',
          'ID',
          'IR',
          'IQ',
          'IE',
          'IM',
          'IL',
          'IT',
          'JM',
          'JP',
          'JE',
          'JO',
          'KZ',
          'KE',
          'KI',
          'KP',
          'KR',
          'KW',
          'KG',
          'LA',
          'LV',
          'LB',
          'LS',
          'LR',
          'LY',
          'LI',
          'LT',
          'LU',
          'MO',
          'MK',
          'MG',
          'MW',
          'MY',
          'MV',
          'ML',
          'MT',
          'MH',
          'MQ',
          'MR',
          'MU',
          'YT',
          'MX',
          'FM',
          'MD',
          'MC',
          'MN',
          'ME',
          'MS',
          'MA',
          'MZ',
          'MM',
          'NA',
          'NR',
          'NP',
          'NL',
          'NC',
          'NZ',
          'NI',
          'NE',
          'NG',
          'NU',
          'NF',
          'MP',
          'NO',
          'OM',
          'PK',
          'PW',
          'PS',
          'PA',
          'PG',
          'PY',
          'PE',
          'PH',
          'PN',
          'PL',
          'PT',
          'PR',
          'QA',
          'RE',
          'RO',
          'RU',
          'RW',
          'BL',
          'SH',
          'KN',
          'LC',
          'MF',
          'PM',
          'VC',
          'WS',
          'SM',
          'ST',
          'SA',
          'SN',
          'RS',
          'SC',
          'SL',
          'SG',
          'SX',
          'SK',
          'SI',
          'SB',
          'SO',
          'ZA',
          'GS',
          'SS',
          'ES',
          'LK',
          'SD',
          'SR',
          'SJ',
          'SZ',
          'SE',
          'CH',
          'SY',
          'TW',
          'TJ',
          'TZ',
          'TH',
          'TL',
          'TG',
          'TK',
          'TO',
          'TT',
          'TN',
          'TR',
          'TM',
          'TC',
          'TV',
          'UG',
          'UA',
          'AE',
          'GB',
          'UM',
          'UY',
          'UZ',
          'VU',
          'VE',
          'VN',
          'VG',
          'VI',
          'WF',
          'EH',
          'YE',
          'ZM',
          'ZW',
          'US',
        ],
      },
      address: {
        type: 'object',
        properties: {
          address: {
            $ref: '#/$defs/address_details',
          },
          email: {
            type: 'string',
          },
          phone: {
            type: 'object',
            properties: {
              country_code: {
                type: 'string',
                description: 'The country code attached to the number',
              },
              number: {
                type: 'string',
                description: 'The contact number',
              },
            },
            required: [],
          },
        },
        required: [],
      },
      address_details: {
        type: 'object',
        description: 'Address details',
        properties: {
          city: {
            type: 'string',
            description: 'The city, district, suburb, town, or village of the address.',
          },
          country: {
            $ref: '#/$defs/country_alpha2',
          },
          first_name: {
            type: 'string',
            description: 'The first name for the address',
          },
          last_name: {
            type: 'string',
            description: 'The last name for the address',
          },
          line1: {
            type: 'string',
            description: 'The first line of the street address or P.O. Box.',
          },
          line2: {
            type: 'string',
            description:
              'The second line of the street address or P.O. Box (e.g., apartment, suite, unit, or building).',
          },
          line3: {
            type: 'string',
            description: 'The third line of the street address, if applicable.',
          },
          state: {
            type: 'string',
            description: 'The address state',
          },
          zip: {
            type: 'string',
            description: 'The zip/postal code for the address',
          },
        },
        required: [],
      },
      card_detail: {
        type: 'object',
        properties: {
          card_exp_month: {
            type: 'string',
            description: 'Card Expiry Month',
          },
          card_exp_year: {
            type: 'string',
            description: 'Card Expiry Year',
          },
          card_holder_name: {
            type: 'string',
            description: 'Card Holder Name',
          },
          card_number: {
            type: 'string',
            description: 'Card Number',
          },
          card_issuer: {
            type: 'string',
            description: 'Issuer Bank for Card',
          },
          card_issuing_country: {
            type: 'string',
            description: 'Card Issuing Country',
          },
          card_network: {
            $ref: '#/$defs/card_network',
          },
          card_type: {
            type: 'string',
            description: 'Card Type',
          },
          nick_name: {
            type: 'string',
            description: "Card Holder's Nick Name",
          },
        },
        required: ['card_exp_month', 'card_exp_year', 'card_holder_name', 'card_number'],
      },
      card_network: {
        type: 'string',
        description: 'Indicates the card network.',
        enum: [
          'Visa',
          'Mastercard',
          'AmericanExpress',
          'JCB',
          'DinersClub',
          'Discover',
          'CartesBancaires',
          'UnionPay',
          'Interac',
          'RuPay',
          'Maestro',
          'Star',
          'Pulse',
          'Accel',
          'Nyce',
        ],
      },
      payment_method_issuer_code: {
        type: 'string',
        enum: [
          'jp_hdfc',
          'jp_icici',
          'jp_googlepay',
          'jp_applepay',
          'jp_phonepay',
          'jp_wechat',
          'jp_sofort',
          'jp_giropay',
          'jp_sepa',
          'jp_bacs',
        ],
      },
      payment_method_type: {
        type: 'string',
        description: "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        enum: [
          'ach',
          'affirm',
          'afterpay_clearpay',
          'alfamart',
          'ali_pay',
          'ali_pay_hk',
          'alma',
          'amazon_pay',
          'apple_pay',
          'atome',
          'bacs',
          'bancontact_card',
          'becs',
          'benefit',
          'bizum',
          'blik',
          'boleto',
          'bca_bank_transfer',
          'bni_va',
          'bri_va',
          'card_redirect',
          'cimb_va',
          'classic',
          'credit',
          'crypto_currency',
          'cashapp',
          'dana',
          'danamon_va',
          'debit',
          'duit_now',
          'efecty',
          'eft',
          'eps',
          'fps',
          'evoucher',
          'giropay',
          'givex',
          'google_pay',
          'go_pay',
          'gcash',
          'ideal',
          'interac',
          'indomaret',
          'klarna',
          'kakao_pay',
          'local_bank_redirect',
          'mandiri_va',
          'knet',
          'mb_way',
          'mobile_pay',
          'momo',
          'momo_atm',
          'multibanco',
          'online_banking_thailand',
          'online_banking_czech_republic',
          'online_banking_finland',
          'online_banking_fpx',
          'online_banking_poland',
          'online_banking_slovakia',
          'oxxo',
          'pago_efectivo',
          'permata_bank_transfer',
          'open_banking_uk',
          'pay_bright',
          'paypal',
          'paze',
          'pix',
          'pay_safe_card',
          'przelewy24',
          'prompt_pay',
          'pse',
          'red_compra',
          'red_pagos',
          'samsung_pay',
          'sepa',
          'sepa_bank_transfer',
          'sofort',
          'swish',
          'touch_n_go',
          'trustly',
          'twint',
          'upi_collect',
          'upi_intent',
          'vipps',
          'viet_qr',
          'venmo',
          'walley',
          'we_chat_pay',
          'seven_eleven',
          'lawson',
          'mini_stop',
          'family_mart',
          'seicomart',
          'pay_easy',
          'local_bank_transfer',
          'mifinity',
          'open_banking_pis',
          'direct_carrier_billing',
          'instant_bank_transfer',
          'instant_bank_transfer_finland',
          'instant_bank_transfer_poland',
          'revolut_pay',
        ],
      },
      wallet: {
        anyOf: [
          {
            type: 'object',
            properties: {
              paypal: {
                type: 'object',
                properties: {
                  email: {
                    type: 'string',
                    description: 'Email linked with paypal account',
                  },
                  paypal_id: {
                    type: 'string',
                    description: 'id of the paypal account',
                  },
                  telephone_number: {
                    type: 'string',
                    description: 'mobile number linked to paypal account',
                  },
                },
                required: ['email', 'paypal_id', 'telephone_number'],
              },
            },
            required: ['paypal'],
          },
          {
            type: 'object',
            properties: {
              venmo: {
                type: 'object',
                properties: {
                  telephone_number: {
                    type: 'string',
                    description: 'mobile number linked to venmo account',
                  },
                },
                required: ['telephone_number'],
              },
            },
            required: ['venmo'],
          },
        ],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await client.paymentMethods.create(body));
};

export default { metadata, tool, handler };
