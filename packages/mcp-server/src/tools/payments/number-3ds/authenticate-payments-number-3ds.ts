// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'hyperswitch-mcp/filtering';
import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'payments.number_3ds',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/payments/{payment_id}/3ds/authentication',
  operationId: 'Initiate external authentication for a Payment',
};

export const tool: Tool = {
  name: 'authenticate_payments_number_3ds',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nExternal 3DS Authentication is performed and returns the AuthenticationResponse\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    three_ds_requestor_url: {\n      type: 'string',\n      description: 'Three DS Requestor URL'\n    },\n    trans_status: {\n      type: 'string',\n      description: 'Indicates the transaction status',\n      enum: [        'Y',\n        'N',\n        'U',\n        'A',\n        'R',\n        'C',\n        'D',\n        'I'\n      ]\n    },\n    acs_reference_number: {\n      type: 'string',\n      description: 'Unique identifier assigned by the EMVCo(Europay, Mastercard and Visa)'\n    },\n    acs_signed_content: {\n      type: 'string',\n      description: 'Contains the JWS object created by the ACS for the ARes(Authentication Response) message'\n    },\n    acs_trans_id: {\n      type: 'string',\n      description: 'Unique identifier assigned by the ACS to identify a single transaction'\n    },\n    acs_url: {\n      type: 'string',\n      description: 'Access Server URL to be used for challenge submission'\n    },\n    challenge_request: {\n      type: 'string',\n      description: 'Challenge request which should be sent to acs_url'\n    },\n    three_ds_requestor_app_url: {\n      type: 'string',\n      description: 'Merchant app declaring their URL within the CReq message so that the Authentication app can call the Merchant app after OOB authentication has occurred'\n    },\n    three_dsserver_trans_id: {\n      type: 'string',\n      description: 'Unique identifier assigned by the 3DS Server to identify a single transaction'\n    }\n  },\n  required: [    'three_ds_requestor_url',\n    'trans_status'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      payment_id: {
        type: 'string',
      },
      client_secret: {
        type: 'string',
        description: 'Client Secret',
      },
      device_channel: {
        type: 'string',
        description: 'Device Channel indicating whether request is coming from App or Browser',
        enum: ['APP', 'BRW'],
      },
      threeds_method_comp_ind: {
        $ref: '#/$defs/three_ds_completion_indicator',
      },
      sdk_information: {
        type: 'object',
        description: 'SDK Information if request is from SDK',
        properties: {
          sdk_app_id: {
            type: 'string',
            description: 'Unique ID created on installations of the 3DS Requestor App on a Consumer Device',
          },
          sdk_enc_data: {
            type: 'string',
            description: 'JWE Object containing data encrypted by the SDK for the DS to decrypt',
          },
          sdk_ephem_pub_key: {
            type: 'object',
            description: 'Public key component of the ephemeral key pair generated by the 3DS SDK',
          },
          sdk_max_timeout: {
            type: 'integer',
            description: 'Indicates maximum amount of time in minutes',
          },
          sdk_reference_number: {
            type: 'string',
            description:
              'Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App',
          },
          sdk_trans_id: {
            type: 'string',
            description: 'Unique transaction identifier assigned by the 3DS SDK',
          },
          sdk_type: {
            type: 'string',
            description: 'Enum representing the type of 3DS SDK.',
            enum: ['01', '02', '03', '04', '05'],
          },
        },
        required: [
          'sdk_app_id',
          'sdk_enc_data',
          'sdk_ephem_pub_key',
          'sdk_max_timeout',
          'sdk_reference_number',
          'sdk_trans_id',
        ],
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    $defs: {
      three_ds_completion_indicator: {
        type: 'string',
        description: 'Indicates if 3DS method data was successfully completed or not',
        enum: ['Y', 'N', 'U'],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const { payment_id, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(args, await client.payments.number3DS.authenticate(payment_id, body)),
  );
};

export default { metadata, tool, handler };
