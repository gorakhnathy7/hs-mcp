// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'payments',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/payments/{payment_id}/post_session_tokens',
  operationId: 'Create Post Session Tokens for a Payment',
};

export const tool: Tool = {
  name: 'post_session_tokens_payments',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nPayments - Post Session Tokens",
  inputSchema: {
    type: 'object',
    properties: {
      payment_id: {
        type: 'string',
      },
      client_secret: {
        type: 'string',
        description: "It's a token used for client side verification.",
      },
      payment_method: {
        type: 'string',
        description: "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
        enum: [
          'card',
          'card_redirect',
          'pay_later',
          'wallet',
          'bank_redirect',
          'bank_transfer',
          'crypto',
          'bank_debit',
          'reward',
          'real_time_payment',
          'upi',
          'voucher',
          'gift_card',
          'open_banking',
          'mobile_payment',
        ],
      },
      payment_method_type: {
        $ref: '#/$defs/payment_method_type',
      },
    },
    $defs: {
      payment_method_type: {
        type: 'string',
        description: "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        enum: [
          'ach',
          'affirm',
          'afterpay_clearpay',
          'alfamart',
          'ali_pay',
          'ali_pay_hk',
          'alma',
          'amazon_pay',
          'apple_pay',
          'atome',
          'bacs',
          'bancontact_card',
          'becs',
          'benefit',
          'bizum',
          'blik',
          'boleto',
          'bca_bank_transfer',
          'bni_va',
          'bri_va',
          'card_redirect',
          'cimb_va',
          'classic',
          'credit',
          'crypto_currency',
          'cashapp',
          'dana',
          'danamon_va',
          'debit',
          'duit_now',
          'efecty',
          'eft',
          'eps',
          'fps',
          'evoucher',
          'giropay',
          'givex',
          'google_pay',
          'go_pay',
          'gcash',
          'ideal',
          'interac',
          'indomaret',
          'klarna',
          'kakao_pay',
          'local_bank_redirect',
          'mandiri_va',
          'knet',
          'mb_way',
          'mobile_pay',
          'momo',
          'momo_atm',
          'multibanco',
          'online_banking_thailand',
          'online_banking_czech_republic',
          'online_banking_finland',
          'online_banking_fpx',
          'online_banking_poland',
          'online_banking_slovakia',
          'oxxo',
          'pago_efectivo',
          'permata_bank_transfer',
          'open_banking_uk',
          'pay_bright',
          'paypal',
          'paze',
          'pix',
          'pay_safe_card',
          'przelewy24',
          'prompt_pay',
          'pse',
          'red_compra',
          'red_pagos',
          'samsung_pay',
          'sepa',
          'sepa_bank_transfer',
          'sofort',
          'swish',
          'touch_n_go',
          'trustly',
          'twint',
          'upi_collect',
          'upi_intent',
          'vipps',
          'viet_qr',
          'venmo',
          'walley',
          'we_chat_pay',
          'seven_eleven',
          'lawson',
          'mini_stop',
          'family_mart',
          'seicomart',
          'pay_easy',
          'local_bank_transfer',
          'mifinity',
          'open_banking_pis',
          'direct_carrier_billing',
          'instant_bank_transfer',
          'instant_bank_transfer_finland',
          'instant_bank_transfer_poland',
          'revolut_pay',
        ],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const { payment_id, ...body } = args as any;
  return asTextContentResult(await client.payments.postSessionTokens(payment_id, body));
};

export default { metadata, tool, handler };
