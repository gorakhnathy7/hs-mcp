// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'hyperswitch-mcp/filtering';
import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'refunds',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/refunds/{refund_id}',
  operationId: 'Retrieve a Refund',
};

export const tool: Tool = {
  name: 'retrieve_refunds',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieves a Refund. This may be used to get the status of a previously initiated refund\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/refund_response',\n  $defs: {\n    refund_response: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'integer',\n          description: 'The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc'\n        },\n        connector: {\n          type: 'string',\n          description: 'The connector used for the refund and the corresponding payment'\n        },\n        currency: {\n          type: 'string',\n          description: 'The three-letter ISO currency code'\n        },\n        payment_id: {\n          type: 'string',\n          description: 'The payment id against which refund is initiated'\n        },\n        refund_id: {\n          type: 'string',\n          description: 'Unique Identifier for the refund'\n        },\n        status: {\n          $ref: '#/$defs/refund_status'\n        },\n        created_at: {\n          type: 'string',\n          description: 'The timestamp at which refund is created',\n          format: 'date-time'\n        },\n        error_code: {\n          type: 'string',\n          description: 'The code for the error'\n        },\n        error_message: {\n          type: 'string',\n          description: 'The error message'\n        },\n        issuer_error_code: {\n          type: 'string',\n          description: 'Error code received from the issuer in case of failed refunds'\n        },\n        issuer_error_message: {\n          type: 'string',\n          description: 'Error message received from the issuer in case of failed refunds'\n        },\n        merchant_connector_id: {\n          type: 'string',\n          description: 'The merchant_connector_id of the processor through which this payment went through'\n        },\n        metadata: {\n          type: 'object',\n          description: 'You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object'\n        },\n        profile_id: {\n          type: 'string',\n          description: 'The id of business profile for this refund'\n        },\n        reason: {\n          type: 'string',\n          description: 'An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive'\n        },\n        split_refunds: {\n          $ref: '#/$defs/split_refund'\n        },\n        unified_code: {\n          type: 'string',\n          description: 'Error code unified across the connectors is received here if there was an error while calling connector'\n        },\n        unified_message: {\n          type: 'string',\n          description: 'Error message unified across the connectors is received here if there was an error while calling connector'\n        },\n        updated_at: {\n          type: 'string',\n          description: 'The timestamp at which refund is updated',\n          format: 'date-time'\n        }\n      },\n      required: [        'amount',\n        'connector',\n        'currency',\n        'payment_id',\n        'refund_id',\n        'status'\n      ]\n    },\n    refund_status: {\n      type: 'string',\n      description: 'The status for refunds',\n      enum: [        'succeeded',\n        'failed',\n        'pending',\n        'review'\n      ]\n    },\n    split_refund: {\n      anyOf: [        {\n          type: 'object',\n          properties: {\n            stripe_split_refund: {\n              type: 'object',\n              description: 'Charge specific fields for controlling the revert of funds from either platform or connected account for Stripe. Check sub-fields for more details.',\n              properties: {\n                revert_platform_fee: {\n                  type: 'boolean',\n                  description: 'Toggle for reverting the application fee that was collected for the payment.\\nIf set to false, the funds are pulled from the destination account.'\n                },\n                revert_transfer: {\n                  type: 'boolean',\n                  description: 'Toggle for reverting the transfer that was made during the charge.\\nIf set to false, the funds are pulled from the main platform\\'s account.'\n                }\n              },\n              required: []\n            }\n          },\n          required: [            'stripe_split_refund'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            adyen_split_refund: {\n              $ref: '#/$defs/adyen_split_data'\n            }\n          },\n          required: [            'adyen_split_refund'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            xendit_split_refund: {\n              $ref: '#/$defs/xendit_split_sub_merchant_data'\n            }\n          },\n          required: [            'xendit_split_refund'\n          ]\n        }\n      ],\n      description: 'Charge specific fields for controlling the revert of funds from either platform or connected account. Check sub-fields for more details.'\n    },\n    adyen_split_data: {\n      type: 'object',\n      description: 'Fee information for Split Payments to be charged on the payment being collected for Adyen',\n      properties: {\n        split_items: {\n          type: 'array',\n          description: 'Data for the split items',\n          items: {\n            type: 'object',\n            description: 'Data for the split items',\n            properties: {\n              amount: {\n                type: 'integer',\n                description: 'The amount of the split item'\n              },\n              reference: {\n                type: 'string',\n                description: 'Unique Identifier for the split item'\n              },\n              split_type: {\n                type: 'string',\n                enum: [                  'BalanceAccount',\n                  'AcquiringFees',\n                  'PaymentFee',\n                  'AdyenFees',\n                  'AdyenCommission',\n                  'AdyenMarkup',\n                  'Interchange',\n                  'SchemeFee',\n                  'Commission',\n                  'TopUp',\n                  'Vat'\n                ]\n              },\n              account: {\n                type: 'string',\n                description: 'The unique identifier of the account to which the split amount is allocated.'\n              },\n              description: {\n                type: 'string',\n                description: 'Description for the part of the payment that will be allocated to the specified account.'\n              }\n            },\n            required: [              'amount',\n              'reference',\n              'split_type'\n            ]\n          }\n        },\n        store: {\n          type: 'string',\n          description: 'The store identifier'\n        }\n      },\n      required: [        'split_items'\n      ]\n    },\n    xendit_split_sub_merchant_data: {\n      type: 'object',\n      description: 'Fee information to be charged on the payment being collected for sub-merchant via xendit',\n      properties: {\n        for_user_id: {\n          type: 'string',\n          description: 'The sub-account user-id that you want to make this transaction for.'\n        }\n      },\n      required: [        'for_user_id'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      refund_id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const { refund_id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.refunds.retrieve(refund_id)));
};

export default { metadata, tool, handler };
