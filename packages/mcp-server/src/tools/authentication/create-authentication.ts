// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'authentication',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/authentication',
  operationId: 'Create an Authentication',
};

export const tool: Tool = {
  name: 'create_authentication',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nCreate a new authentication for accessing our APIs from your servers.\n",
  inputSchema: {
    type: 'object',
    properties: {
      amount: {
        type: 'integer',
        description: 'This Unit struct represents MinorUnit in which core amount works',
      },
      currency: {
        $ref: '#/$defs/currency',
      },
      acquirer_details: {
        $ref: '#/$defs/acquirer_details',
      },
      authentication_connector: {
        $ref: '#/$defs/authentication_connectors',
      },
      authentication_id: {
        type: 'string',
        description: 'The unique identifier for this authentication.',
      },
      customer: {
        $ref: '#/$defs/customer_details',
      },
      force_3ds_challenge: {
        type: 'boolean',
        description: 'Force 3DS challenge.',
      },
      profile_id: {
        type: 'string',
        description: 'The business profile that is associated with this authentication',
      },
      psd2_sca_exemption_type: {
        $ref: '#/$defs/sca_exemption_type',
      },
      return_url: {
        type: 'string',
        description: 'The URL to which the user should be redirected after authentication.',
      },
    },
    $defs: {
      currency: {
        type: 'string',
        description:
          'The three-letter ISO 4217 currency code (e.g., "USD", "EUR") for the payment amount. This field is mandatory for creating a payment.',
        enum: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTN',
          'BWP',
          'BYN',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRU',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SLE',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STD',
          'STN',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
          'ZWL',
        ],
      },
      acquirer_details: {
        type: 'object',
        properties: {
          bin: {
            type: 'string',
            description: 'The bin of the card.',
          },
          country_code: {
            type: 'string',
            description: 'The country code of the card.',
          },
          merchant_id: {
            type: 'string',
            description: 'The merchant id of the card.',
          },
        },
        required: [],
      },
      authentication_connectors: {
        type: 'string',
        enum: [
          'threedsecureio',
          'netcetera',
          'gpayments',
          'ctp_mastercard',
          'unified_authentication_service',
          'juspaythreedsserver',
          'ctp_visa',
        ],
      },
      customer_details: {
        type: 'object',
        description:
          'Passing this object creates a new customer or attaches an existing customer to the payment',
        properties: {
          id: {
            type: 'string',
            description: 'The identifier for the customer.',
          },
          email: {
            type: 'string',
            description: "The customer's email address",
          },
          name: {
            type: 'string',
            description: "The customer's name",
          },
          phone: {
            type: 'string',
            description: "The customer's phone number",
          },
          phone_country_code: {
            type: 'string',
            description: "The country code for the customer's phone number",
          },
        },
        required: ['id'],
      },
      sca_exemption_type: {
        type: 'string',
        description: 'SCA Exemptions types available for authentication',
        enum: ['low_value', 'transaction_risk_analysis'],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await client.authentication.create(body));
};

export default { metadata, tool, handler };
