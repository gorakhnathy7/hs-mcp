// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'payouts',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/payouts/create',
  operationId: 'Create a Payout',
};

export const tool: Tool = {
  name: 'create_payouts',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nPayouts - Create",
  inputSchema: {
    type: 'object',
    properties: {
      amount: {
        type: 'integer',
        description:
          'The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,',
      },
      currency: {
        $ref: '#/$defs/currency',
      },
      auto_fulfill: {
        type: 'boolean',
        description: 'Set to true to confirm the payout without review, no further action required',
      },
      billing: {
        $ref: '#/$defs/address',
      },
      business_country: {
        $ref: '#/$defs/country_alpha2',
      },
      business_label: {
        type: 'string',
        description: 'Business label of the merchant for this payout. _Deprecated: Use profile_id instead._',
      },
      confirm: {
        type: 'boolean',
        description:
          'This field is used when merchant wants to confirm the payout, thus useful for the payout _Confirm_ request. Ideally merchants should _Create_ a payout, _Update_ it (if required), then _Confirm_ it.',
      },
      connector: {
        type: 'array',
        description:
          'This field allows the merchant to manually select a connector with which the payout can go through.',
        items: {
          $ref: '#/$defs/payout_connectors',
        },
      },
      customer: {
        $ref: '#/$defs/customer_details',
      },
      customer_id: {
        type: 'string',
        description:
          'The identifier for the customer object. If not provided the customer ID will be autogenerated. _Deprecated: Use customer_id instead._',
      },
      description: {
        type: 'string',
        description: 'A description of the payout',
      },
      email: {
        type: 'string',
        description: "Customer's email. _Deprecated: Use customer object instead._",
      },
      entity_type: {
        $ref: '#/$defs/entity_type',
      },
      metadata: {
        type: 'object',
        description:
          'You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.',
      },
      name: {
        type: 'string',
        description: "Customer's name. _Deprecated: Use customer object instead._",
      },
      payout_link: {
        type: 'boolean',
        description:
          'Whether to get the payout link (if applicable). Merchant need to specify this during the Payout _Create_, this field can not be updated during Payout _Update_.',
      },
      payout_link_config: {
        $ref: '#/$defs/create_payout_link_config',
      },
      payout_method_data: {
        $ref: '#/$defs/method_data',
      },
      payout_method_id: {
        type: 'string',
        description: 'Identifier for payout method',
      },
      payout_token: {
        type: 'string',
        description: 'Provide a reference to a stored payout method, used to process the payout.',
      },
      payout_type: {
        $ref: '#/$defs/payout_type',
      },
      phone: {
        type: 'string',
        description: "Customer's phone. _Deprecated: Use customer object instead._",
      },
      phone_country_code: {
        type: 'string',
        description: "Customer's phone country code. _Deprecated: Use customer object instead._",
      },
      priority: {
        $ref: '#/$defs/send_priority',
      },
      profile_id: {
        type: 'string',
        description:
          'The business profile to use for this payout, especially if there are multiple business profiles associated with the account, otherwise default business profile associated with the merchant account will be used.',
      },
      recurring: {
        type: 'boolean',
        description: 'Specifies whether or not the payout request is recurring',
      },
      return_url: {
        type: 'string',
        description: 'The URL to redirect after the completion of the operation',
      },
      routing: {
        $ref: '#/$defs/static_routing_algorithm',
      },
      session_expiry: {
        type: 'integer',
        description:
          'Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins',
      },
    },
    $defs: {
      currency: {
        type: 'string',
        description:
          'The three-letter ISO 4217 currency code (e.g., "USD", "EUR") for the payment amount. This field is mandatory for creating a payment.',
        enum: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTN',
          'BWP',
          'BYN',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRU',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SLE',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STD',
          'STN',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
          'ZWL',
        ],
      },
      address: {
        type: 'object',
        properties: {
          address: {
            $ref: '#/$defs/address_details',
          },
          email: {
            type: 'string',
          },
          phone: {
            type: 'object',
            properties: {
              country_code: {
                type: 'string',
                description: 'The country code attached to the number',
              },
              number: {
                type: 'string',
                description: 'The contact number',
              },
            },
            required: [],
          },
        },
        required: [],
      },
      address_details: {
        type: 'object',
        description: 'Address details',
        properties: {
          city: {
            type: 'string',
            description: 'The city, district, suburb, town, or village of the address.',
          },
          country: {
            $ref: '#/$defs/country_alpha2',
          },
          first_name: {
            type: 'string',
            description: 'The first name for the address',
          },
          last_name: {
            type: 'string',
            description: 'The last name for the address',
          },
          line1: {
            type: 'string',
            description: 'The first line of the street address or P.O. Box.',
          },
          line2: {
            type: 'string',
            description:
              'The second line of the street address or P.O. Box (e.g., apartment, suite, unit, or building).',
          },
          line3: {
            type: 'string',
            description: 'The third line of the street address, if applicable.',
          },
          state: {
            type: 'string',
            description: 'The address state',
          },
          zip: {
            type: 'string',
            description: 'The zip/postal code for the address',
          },
        },
        required: [],
      },
      country_alpha2: {
        type: 'string',
        enum: [
          'AF',
          'AX',
          'AL',
          'DZ',
          'AS',
          'AD',
          'AO',
          'AI',
          'AQ',
          'AG',
          'AR',
          'AM',
          'AW',
          'AU',
          'AT',
          'AZ',
          'BS',
          'BH',
          'BD',
          'BB',
          'BY',
          'BE',
          'BZ',
          'BJ',
          'BM',
          'BT',
          'BO',
          'BQ',
          'BA',
          'BW',
          'BV',
          'BR',
          'IO',
          'BN',
          'BG',
          'BF',
          'BI',
          'KH',
          'CM',
          'CA',
          'CV',
          'KY',
          'CF',
          'TD',
          'CL',
          'CN',
          'CX',
          'CC',
          'CO',
          'KM',
          'CG',
          'CD',
          'CK',
          'CR',
          'CI',
          'HR',
          'CU',
          'CW',
          'CY',
          'CZ',
          'DK',
          'DJ',
          'DM',
          'DO',
          'EC',
          'EG',
          'SV',
          'GQ',
          'ER',
          'EE',
          'ET',
          'FK',
          'FO',
          'FJ',
          'FI',
          'FR',
          'GF',
          'PF',
          'TF',
          'GA',
          'GM',
          'GE',
          'DE',
          'GH',
          'GI',
          'GR',
          'GL',
          'GD',
          'GP',
          'GU',
          'GT',
          'GG',
          'GN',
          'GW',
          'GY',
          'HT',
          'HM',
          'VA',
          'HN',
          'HK',
          'HU',
          'IS',
          'IN',
          'ID',
          'IR',
          'IQ',
          'IE',
          'IM',
          'IL',
          'IT',
          'JM',
          'JP',
          'JE',
          'JO',
          'KZ',
          'KE',
          'KI',
          'KP',
          'KR',
          'KW',
          'KG',
          'LA',
          'LV',
          'LB',
          'LS',
          'LR',
          'LY',
          'LI',
          'LT',
          'LU',
          'MO',
          'MK',
          'MG',
          'MW',
          'MY',
          'MV',
          'ML',
          'MT',
          'MH',
          'MQ',
          'MR',
          'MU',
          'YT',
          'MX',
          'FM',
          'MD',
          'MC',
          'MN',
          'ME',
          'MS',
          'MA',
          'MZ',
          'MM',
          'NA',
          'NR',
          'NP',
          'NL',
          'NC',
          'NZ',
          'NI',
          'NE',
          'NG',
          'NU',
          'NF',
          'MP',
          'NO',
          'OM',
          'PK',
          'PW',
          'PS',
          'PA',
          'PG',
          'PY',
          'PE',
          'PH',
          'PN',
          'PL',
          'PT',
          'PR',
          'QA',
          'RE',
          'RO',
          'RU',
          'RW',
          'BL',
          'SH',
          'KN',
          'LC',
          'MF',
          'PM',
          'VC',
          'WS',
          'SM',
          'ST',
          'SA',
          'SN',
          'RS',
          'SC',
          'SL',
          'SG',
          'SX',
          'SK',
          'SI',
          'SB',
          'SO',
          'ZA',
          'GS',
          'SS',
          'ES',
          'LK',
          'SD',
          'SR',
          'SJ',
          'SZ',
          'SE',
          'CH',
          'SY',
          'TW',
          'TJ',
          'TZ',
          'TH',
          'TL',
          'TG',
          'TK',
          'TO',
          'TT',
          'TN',
          'TR',
          'TM',
          'TC',
          'TV',
          'UG',
          'UA',
          'AE',
          'GB',
          'UM',
          'UY',
          'UZ',
          'VU',
          'VE',
          'VN',
          'VG',
          'VI',
          'WF',
          'EH',
          'YE',
          'ZM',
          'ZW',
          'US',
        ],
      },
      payout_connectors: {
        type: 'string',
        enum: [
          'adyen',
          'adyenplatform',
          'cybersource',
          'ebanx',
          'nomupay',
          'payone',
          'paypal',
          'stripe',
          'wise',
        ],
      },
      customer_details: {
        type: 'object',
        description:
          'Passing this object creates a new customer or attaches an existing customer to the payment',
        properties: {
          id: {
            type: 'string',
            description: 'The identifier for the customer.',
          },
          email: {
            type: 'string',
            description: "The customer's email address",
          },
          name: {
            type: 'string',
            description: "The customer's name",
          },
          phone: {
            type: 'string',
            description: "The customer's phone number",
          },
          phone_country_code: {
            type: 'string',
            description: "The country code for the customer's phone number",
          },
        },
        required: ['id'],
      },
      entity_type: {
        type: 'string',
        description:
          'Type of entity to whom the payout is being carried out to, select from the given list of options',
        enum: [
          'Individual',
          'Company',
          'NonProfit',
          'PublicSector',
          'NaturalPerson',
          'lowercase',
          'Personal',
        ],
      },
      create_payout_link_config: {
        allOf: [
          {
            $ref: '#/$defs/generic_link_ui_config',
          },
        ],
        description:
          'Custom payout link config for the particular payout, if payout link is to be generated.',
      },
      generic_link_ui_config: {
        type: 'object',
        description: 'Object for GenericLinkUiConfig',
        properties: {
          logo: {
            type: 'string',
            description: "Merchant's display logo",
          },
          merchant_name: {
            type: 'string',
            description: 'Custom merchant name for the link',
          },
          theme: {
            type: 'string',
            description: 'Primary color to be used in the form represented in hex format',
          },
        },
        required: [],
      },
      method_data: {
        anyOf: [
          {
            type: 'object',
            properties: {
              card: {
                type: 'object',
                properties: {
                  card_holder_name: {
                    type: 'string',
                    description: "The card holder's name",
                  },
                  card_number: {
                    type: 'string',
                    description: 'The card number',
                  },
                  expiry_month: {
                    type: 'string',
                    description: "The card's expiry month",
                  },
                  expiry_year: {
                    type: 'string',
                    description: "The card's expiry year",
                  },
                },
                required: ['card_holder_name', 'card_number', 'expiry_month', 'expiry_year'],
              },
            },
            required: ['card'],
          },
          {
            type: 'object',
            properties: {
              bank: {
                $ref: '#/$defs/bank',
              },
            },
            required: ['bank'],
          },
          {
            type: 'object',
            properties: {
              wallet: {
                $ref: '#/$defs/wallet',
              },
            },
            required: ['wallet'],
          },
        ],
        description: 'The payout method information required for carrying out a payout',
      },
      bank: {
        anyOf: [
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              bank_routing_number: {
                type: 'string',
                description: '[9 digits] Routing number - used in USA for identifying a specific bank.',
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bank_account_number', 'bank_routing_number'],
          },
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              bank_sort_code: {
                type: 'string',
                description:
                  "[6 digits] Sort Code - used in UK and Ireland for identifying a bank and it's branches.",
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bank_account_number', 'bank_sort_code'],
          },
          {
            type: 'object',
            properties: {
              bic: {
                type: 'string',
                description:
                  "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
              },
              iban: {
                type: 'string',
                description:
                  "International Bank Account Number (iban) - used in many countries for identifying a bank along with it's customer.",
              },
              bank_city: {
                type: 'string',
                description: 'Bank city',
              },
              bank_country_code: {
                $ref: '#/$defs/country_alpha2',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
            },
            required: ['bic', 'iban'],
          },
          {
            type: 'object',
            properties: {
              bank_account_number: {
                type: 'string',
                description: 'Bank account number is an unique identifier assigned by a bank to a customer.',
              },
              pix_key: {
                type: 'string',
                description: 'Unique key for pix customer',
              },
              bank_branch: {
                type: 'string',
                description: 'Bank branch',
              },
              bank_name: {
                type: 'string',
                description: 'Bank name',
              },
              tax_id: {
                type: 'string',
                description: 'Individual taxpayer identification number',
              },
            },
            required: ['bank_account_number', 'pix_key'],
          },
        ],
      },
      wallet: {
        anyOf: [
          {
            type: 'object',
            properties: {
              paypal: {
                type: 'object',
                properties: {
                  email: {
                    type: 'string',
                    description: 'Email linked with paypal account',
                  },
                  paypal_id: {
                    type: 'string',
                    description: 'id of the paypal account',
                  },
                  telephone_number: {
                    type: 'string',
                    description: 'mobile number linked to paypal account',
                  },
                },
                required: ['email', 'paypal_id', 'telephone_number'],
              },
            },
            required: ['paypal'],
          },
          {
            type: 'object',
            properties: {
              venmo: {
                type: 'object',
                properties: {
                  telephone_number: {
                    type: 'string',
                    description: 'mobile number linked to venmo account',
                  },
                },
                required: ['telephone_number'],
              },
            },
            required: ['venmo'],
          },
        ],
      },
      payout_type: {
        type: 'string',
        description:
          'The payout_type of the payout request is a mandatory field for confirming the payouts. It should be specified in the Create request. If not provided, it must be updated in the Payout Update request before it can be confirmed.',
        enum: ['card', 'bank', 'wallet'],
      },
      send_priority: {
        type: 'string',
        description:
          'The send method which will be required for processing payouts, check options for better understanding.',
        enum: ['instant', 'fast', 'regular', 'wire', 'cross_border', 'internal'],
      },
      static_routing_algorithm: {
        anyOf: [
          {
            type: 'object',
            properties: {
              data: {
                $ref: '#/$defs/routable_connector_choice',
              },
              type: {
                type: 'string',
                enum: ['single'],
              },
            },
            required: ['data', 'type'],
          },
          {
            type: 'object',
            properties: {
              data: {
                type: 'array',
                items: {
                  $ref: '#/$defs/routable_connector_choice',
                },
              },
              type: {
                type: 'string',
                enum: ['priority'],
              },
            },
            required: ['data', 'type'],
          },
          {
            type: 'object',
            properties: {
              data: {
                type: 'array',
                items: {
                  $ref: '#/$defs/connector_volume_split',
                },
              },
              type: {
                type: 'string',
                enum: ['volume_split'],
              },
            },
            required: ['data', 'type'],
          },
          {
            type: 'object',
            properties: {
              data: {
                type: 'object',
                description:
                  'The program, having a default connector selection and\na bunch of rules. Also can hold arbitrary metadata.',
                properties: {
                  defaultSelection: {
                    $ref: '#/$defs/connector_selection',
                  },
                  metadata: {
                    type: 'object',
                  },
                  rules: {
                    type: 'object',
                    description:
                      'Represents a rule\n\n```text\nrule_name: [stripe, adyen, checkout]\n{\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n\npayment.method.cardtype = credit\n}\n}\n```',
                    properties: {
                      connectorSelection: {
                        $ref: '#/$defs/connector_selection',
                      },
                      name: {
                        type: 'string',
                      },
                      statements: {
                        type: 'array',
                        items: {
                          $ref: '#/$defs/if_statement',
                        },
                      },
                    },
                    required: ['connectorSelection', 'name', 'statements'],
                  },
                },
                required: ['defaultSelection', 'metadata', 'rules'],
              },
              type: {
                type: 'string',
                enum: ['advanced'],
              },
            },
            required: ['data', 'type'],
          },
          {
            type: 'object',
            properties: {
              data: {
                type: 'object',
                properties: {
                  defaultSelection: {
                    type: 'object',
                    description:
                      'Struct representing the output configuration for the 3DS Decision Rule Engine.',
                    properties: {
                      decision: {
                        $ref: '#/$defs/three_ds_decision',
                      },
                    },
                    required: ['decision'],
                  },
                  metadata: {
                    type: 'object',
                  },
                  rules: {
                    type: 'object',
                    properties: {
                      connectorSelection: {
                        $ref: '#/$defs/three_ds_decision',
                      },
                      name: {
                        type: 'string',
                      },
                      statements: {
                        type: 'array',
                        items: {
                          $ref: '#/$defs/if_statement',
                        },
                      },
                    },
                    required: ['connectorSelection', 'name', 'statements'],
                  },
                },
                required: ['defaultSelection', 'metadata', 'rules'],
              },
              type: {
                type: 'string',
                enum: ['three_ds_decision_rule'],
              },
            },
            required: ['data', 'type'],
          },
        ],
      },
      routable_connector_choice: {
        type: 'object',
        description: 'Routable Connector chosen for a payment',
        properties: {
          connector: {
            type: 'string',
            description:
              'RoutableConnectors are the subset of Connectors that are eligible for payments routing',
            enum: [
              'adyenplatform',
              'stripe_billing_test',
              'phonypay',
              'fauxpay',
              'pretendpay',
              'stripe_test',
              'adyen_test',
              'checkout_test',
              'paypal_test',
              'aci',
              'adyen',
              'airwallex',
              'archipel',
              'authorizedotnet',
              'bankofamerica',
              'barclaycard',
              'billwerk',
              'bitpay',
              'bambora',
              'bamboraapac',
              'bluesnap',
              'boku',
              'braintree',
              'cashtocode',
              'chargebee',
              'checkout',
              'coinbase',
              'coingate',
              'cryptopay',
              'cybersource',
              'datatrans',
              'deutschebank',
              'digitalvirgo',
              'dlocal',
              'ebanx',
              'elavon',
              'facilitapay',
              'fiserv',
              'fiservemea',
              'fiuu',
              'forte',
              'getnet',
              'globalpay',
              'globepay',
              'gocardless',
              'hipay',
              'helcim',
              'iatapay',
              'inespay',
              'itaubank',
              'jpmorgan',
              'klarna',
              'mifinity',
              'mollie',
              'moneris',
              'multisafepay',
              'nexinets',
              'nexixpay',
              'nmi',
              'nomupay',
              'noon',
              'novalnet',
              'nuvei',
              'opennode',
              'paybox',
              'payme',
              'payone',
              'paypal',
              'paystack',
              'payu',
              'placetopay',
              'powertranz',
              'prophetpay',
              'rapyd',
              'razorpay',
              'recurly',
              'redsys',
              'riskified',
              'shift4',
              'signifyd',
              'square',
              'stax',
              'stripe',
              'stripebilling',
              'trustpay',
              'tokenio',
              'tsys',
              'volt',
              'wellsfargo',
              'wise',
              'worldline',
              'worldpay',
              'worldpayvantiv',
              'worldpayxml',
              'xendit',
              'zen',
              'plaid',
              'zsl',
            ],
          },
          merchant_connector_id: {
            type: 'string',
          },
        },
        required: ['connector'],
      },
      connector_volume_split: {
        type: 'object',
        properties: {
          connector: {
            $ref: '#/$defs/routable_connector_choice',
          },
          split: {
            type: 'integer',
          },
        },
        required: ['connector', 'split'],
      },
      connector_selection: {
        anyOf: [
          {
            type: 'object',
            properties: {
              data: {
                type: 'array',
                items: {
                  $ref: '#/$defs/routable_connector_choice',
                },
              },
              type: {
                type: 'string',
                enum: ['priority'],
              },
            },
            required: ['data', 'type'],
          },
          {
            type: 'object',
            properties: {
              data: {
                type: 'array',
                items: {
                  $ref: '#/$defs/connector_volume_split',
                },
              },
              type: {
                type: 'string',
                enum: ['volume_split'],
              },
            },
            required: ['data', 'type'],
          },
        ],
      },
      if_statement: {
        type: 'object',
        description:
          'Represents an IF statement with conditions and optional nested IF statements\n\n```text\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n}\n```',
        properties: {
          condition: {
            type: 'array',
            items: {
              type: 'object',
              description: 'Represents a single comparison condition.',
              properties: {
                comparison: {
                  type: 'string',
                  description: 'Conditional comparison type',
                  enum: [
                    'equal',
                    'not_equal',
                    'less_than',
                    'less_than_equal',
                    'greater_than',
                    'greater_than_equal',
                  ],
                },
                lhs: {
                  type: 'string',
                  description:
                    'The left hand side which will always be a domain input identifier like "payment.method.cardtype"',
                },
                metadata: {
                  type: 'object',
                  description:
                    'Additional metadata that the Static Analyzer and Backend does not touch.\nThis can be used to store useful information for the frontend and is required for communication\nbetween the static analyzer and the frontend.',
                },
                value: {
                  anyOf: [
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['number'],
                        },
                        value: {
                          type: 'integer',
                          description: 'This Unit struct represents MinorUnit in which core amount works',
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['enum_variant'],
                        },
                        value: {
                          type: 'string',
                          description: 'Represents an enum variant',
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['metadata_variant'],
                        },
                        value: {
                          type: 'object',
                          properties: {
                            key: {
                              type: 'string',
                            },
                            value: {
                              type: 'string',
                            },
                          },
                          required: ['key', 'value'],
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['str_value'],
                        },
                        value: {
                          type: 'string',
                          description: 'Represents a arbitrary String value',
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['number_array'],
                        },
                        value: {
                          type: 'array',
                          description:
                            'Represents an array of numbers. This is basically used for\n"one of the given numbers" operations\neg: payment.method.amount = (1, 2, 3)',
                          items: {
                            type: 'integer',
                            description: 'This Unit struct represents MinorUnit in which core amount works',
                          },
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['enum_variant_array'],
                        },
                        value: {
                          type: 'array',
                          description:
                            'Similar to NumberArray but for enum variants\neg: payment.method.cardtype = (debit, credit)',
                          items: {
                            type: 'string',
                          },
                        },
                      },
                      required: ['type', 'value'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['number_comparison_array'],
                        },
                        value: {
                          type: 'array',
                          description:
                            'Like a number array but can include comparisons. Useful for\nconditions like "500 < amount < 1000"\neg: payment.amount = (> 500, < 1000)',
                          items: {
                            type: 'object',
                            description: 'Represents a number comparison for "NumberComparisonArrayValue"',
                            properties: {
                              comparisonType: {
                                type: 'string',
                                description: 'Conditional comparison type',
                                enum: [
                                  'equal',
                                  'not_equal',
                                  'less_than',
                                  'less_than_equal',
                                  'greater_than',
                                  'greater_than_equal',
                                ],
                              },
                              number: {
                                type: 'integer',
                                description:
                                  'This Unit struct represents MinorUnit in which core amount works',
                              },
                            },
                            required: ['comparisonType', 'number'],
                          },
                        },
                      },
                      required: ['type', 'value'],
                    },
                  ],
                  description: 'Represents a value in the DSL',
                },
              },
              required: ['comparison', 'lhs', 'metadata', 'value'],
            },
          },
          nested: {
            type: 'array',
            items: {
              $ref: '#/$defs/if_statement',
            },
          },
        },
        required: ['condition'],
      },
      three_ds_decision: {
        type: 'string',
        description: 'Enum representing the possible outcomes of the 3DS Decision Rule Engine.',
        enum: [
          'no_three_ds',
          'challenge_requested',
          'challenge_preferred',
          'three_ds_exemption_requested_tra',
          'three_ds_exemption_requested_low_value',
          'issuer_three_ds_exemption_requested',
        ],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await client.payouts.create(body));
};

export default { metadata, tool, handler };
