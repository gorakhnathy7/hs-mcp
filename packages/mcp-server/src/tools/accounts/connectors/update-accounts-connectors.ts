// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'hyperswitch-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Hyperswitch from 'hyperswitch';

export const metadata: Metadata = {
  resource: 'accounts.connectors',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/account/{account_id}/connectors/{merchant_connector_id}',
  operationId: 'Update a Merchant Connector',
};

export const tool: Tool = {
  name: 'update_accounts_connectors',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nTo update an existing Merchant Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector",
  inputSchema: {
    type: 'object',
    properties: {
      account_id: {
        type: 'string',
      },
      merchant_connector_id: {
        type: 'string',
      },
      connector_type: {
        $ref: '#/$defs/connector_type',
      },
      status: {
        $ref: '#/$defs/connector_status',
      },
      additional_merchant_data: {
        $ref: '#/$defs/additional_merchant_data',
      },
      connector_account_details: {
        $ref: '#/$defs/merchant_connector_details',
      },
      connector_label: {
        type: 'string',
        description:
          'This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is `default`, connector label can be `stripe_default`',
      },
      connector_wallets_details: {
        $ref: '#/$defs/connector_wallet_details',
      },
      connector_webhook_details: {
        $ref: '#/$defs/merchant_connector_webhook_details',
      },
      disabled: {
        type: 'boolean',
        description:
          'A boolean value to indicate if the connector is disabled. By default, its value is false.',
      },
      frm_configs: {
        type: 'array',
        description: 'Contains the frm configs for the merchant connector',
        items: {
          $ref: '#/$defs/frm_configs',
        },
      },
      metadata: {
        type: 'object',
        description: 'Metadata is useful for storing additional, unstructured information on an object.',
      },
      payment_methods_enabled: {
        type: 'array',
        description:
          'An object containing the details about the payment methods that need to be enabled under this merchant connector account',
        items: {
          $ref: '#/$defs/payment_methods_enabled',
        },
      },
      pm_auth_config: {
        type: 'object',
        description:
          'pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt',
      },
      test_mode: {
        type: 'boolean',
        description:
          'A boolean value to indicate if the connector is in Test mode. By default, its value is false.',
      },
    },
    $defs: {
      connector_type: {
        type: 'string',
        description:
          'Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking.',
        enum: [
          'payment_processor',
          'payment_vas',
          'fin_operations',
          'fiz_operations',
          'networks',
          'banking_entities',
          'non_banking_finance',
          'payout_processor',
          'payment_method_auth',
          'authentication_processor',
          'tax_processor',
          'billing_processor',
          'vault_processor',
        ],
      },
      connector_status: {
        type: 'string',
        enum: ['inactive', 'active'],
      },
      additional_merchant_data: {
        type: 'object',
        properties: {
          open_banking_recipient_data: {
            anyOf: [
              {
                type: 'object',
                properties: {
                  connector_recipient_id: {
                    type: 'string',
                  },
                },
                required: ['connector_recipient_id'],
              },
              {
                type: 'object',
                properties: {
                  wallet_id: {
                    type: 'string',
                  },
                },
                required: ['wallet_id'],
              },
              {
                type: 'object',
                properties: {
                  account_data: {
                    anyOf: [
                      {
                        type: 'object',
                        properties: {
                          iban: {
                            type: 'object',
                            description: 'IBAN-based account for international transfers',
                            properties: {
                              iban: {
                                type: 'string',
                                description: 'International Bank Account Number (up to 34 characters)',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['iban', 'name'],
                          },
                        },
                        required: ['iban'],
                      },
                      {
                        type: 'object',
                        properties: {
                          bacs: {
                            type: 'object',
                            description: 'UK BACS payment system',
                            properties: {
                              account_number: {
                                type: 'string',
                                description: '8-digit UK account number',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              sort_code: {
                                type: 'string',
                                description: '6-digit UK sort code',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['account_number', 'name', 'sort_code'],
                          },
                        },
                        required: ['bacs'],
                      },
                      {
                        type: 'object',
                        properties: {
                          faster_payments: {
                            type: 'object',
                            description: 'UK Faster Payments (instant transfers)',
                            properties: {
                              account_number: {
                                type: 'string',
                                description: '8-digit UK account number',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              sort_code: {
                                type: 'string',
                                description: '6-digit UK sort code',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['account_number', 'name', 'sort_code'],
                          },
                        },
                        required: ['faster_payments'],
                      },
                      {
                        type: 'object',
                        properties: {
                          sepa: {
                            type: 'object',
                            description: 'SEPA payments (Euro zone)',
                            properties: {
                              iban: {
                                type: 'string',
                                description: 'IBAN for SEPA transfers',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['iban', 'name'],
                          },
                        },
                        required: ['sepa'],
                      },
                      {
                        type: 'object',
                        properties: {
                          sepa_instant: {
                            type: 'object',
                            description: 'SEPA Instant payments (10-second transfers)',
                            properties: {
                              iban: {
                                type: 'string',
                                description: 'IBAN for instant SEPA transfers',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['iban', 'name'],
                          },
                        },
                        required: ['sepa_instant'],
                      },
                      {
                        type: 'object',
                        properties: {
                          elixir: {
                            type: 'object',
                            description: 'Polish Elixir payment system',
                            properties: {
                              account_number: {
                                type: 'string',
                                description: 'Polish account number (26 digits)',
                              },
                              iban: {
                                type: 'string',
                                description: 'Polish IBAN (28 chars)',
                              },
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['account_number', 'iban', 'name'],
                          },
                        },
                        required: ['elixir'],
                      },
                      {
                        type: 'object',
                        properties: {
                          bankgiro: {
                            type: 'object',
                            description: 'Swedish Bankgiro system',
                            properties: {
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              number: {
                                type: 'string',
                                description: 'Bankgiro number (7-8 digits)',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['name', 'number'],
                          },
                        },
                        required: ['bankgiro'],
                      },
                      {
                        type: 'object',
                        properties: {
                          plusgiro: {
                            type: 'object',
                            description: 'Swedish Plusgiro system',
                            properties: {
                              name: {
                                type: 'string',
                                description: 'Account holder name',
                              },
                              number: {
                                type: 'string',
                                description: 'Plusgiro number (2-8 digits)',
                              },
                              connector_recipient_id: {
                                type: 'string',
                              },
                            },
                            required: ['name', 'number'],
                          },
                        },
                        required: ['plusgiro'],
                      },
                    ],
                  },
                },
                required: ['account_data'],
              },
            ],
          },
        },
        required: ['open_banking_recipient_data'],
      },
      merchant_connector_details: {
        type: 'object',
        properties: {
          connector_account_details: {
            type: 'object',
            description:
              'Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.',
          },
          metadata: {
            type: 'object',
            description: 'Metadata is useful for storing additional, unstructured information on an object.',
          },
        },
        required: [],
      },
      connector_wallet_details: {
        type: 'object',
        properties: {
          apple_pay: {
            type: 'object',
            description:
              'This field is for our legacy Apple Pay flow that contains the Apple Pay certificates and credentials for only iOS Apple Pay flow',
          },
          apple_pay_combined: {
            type: 'object',
            description:
              'This field contains the Apple Pay certificates and credentials for iOS and Web Apple Pay flow',
          },
          google_pay: {
            type: 'object',
            description: 'This field contains the Google Pay certificates and credentials',
          },
          paze: {
            type: 'object',
            description: 'This field contains the Paze certificates and credentials',
          },
          samsung_pay: {
            type: 'object',
            description: 'This field contains the Samsung Pay certificates and credentials',
          },
        },
        required: [],
      },
      merchant_connector_webhook_details: {
        type: 'object',
        properties: {
          additional_secret: {
            type: 'string',
          },
          merchant_secret: {
            type: 'string',
          },
        },
        required: ['additional_secret', 'merchant_secret'],
      },
      frm_configs: {
        type: 'object',
        description:
          'Details of FrmConfigs are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table',
        properties: {
          gateway: {
            $ref: '#/$defs/connector_type',
          },
          payment_methods: {
            type: 'array',
            description: 'payment methods that can be used in the payment',
            items: {
              type: 'object',
              description:
                'Details of FrmPaymentMethod are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table',
              properties: {
                payment_method: {
                  type: 'string',
                  description: "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
                  enum: [
                    'card',
                    'card_redirect',
                    'pay_later',
                    'wallet',
                    'bank_redirect',
                    'bank_transfer',
                    'crypto',
                    'bank_debit',
                    'reward',
                    'real_time_payment',
                    'upi',
                    'voucher',
                    'gift_card',
                    'open_banking',
                    'mobile_payment',
                  ],
                },
                flow: {
                  $ref: '#/$defs/frm_preferred_flow_types',
                },
                payment_method_types: {
                  type: 'array',
                  description:
                    'payment method types(credit, debit) that can be used in the payment. This field is deprecated. It has not been removed to provide backward compatibility.',
                  items: {
                    type: 'object',
                    description:
                      'Details of FrmPaymentMethodType are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table',
                    properties: {
                      action: {
                        type: 'string',
                        enum: ['cancel_txn', 'auto_refund', 'manual_review'],
                      },
                      card_networks: {
                        $ref: '#/$defs/card_network',
                      },
                      flow: {
                        $ref: '#/$defs/frm_preferred_flow_types',
                      },
                      payment_method_type: {
                        $ref: '#/$defs/payment_method_type',
                      },
                    },
                    required: ['action', 'card_networks', 'flow', 'payment_method_type'],
                  },
                },
              },
              required: ['payment_method'],
            },
          },
        },
        required: ['gateway', 'payment_methods'],
      },
      frm_preferred_flow_types: {
        type: 'string',
        enum: ['pre', 'post'],
      },
      card_network: {
        type: 'string',
        description: 'Indicates the card network.',
        enum: [
          'Visa',
          'Mastercard',
          'AmericanExpress',
          'JCB',
          'DinersClub',
          'Discover',
          'CartesBancaires',
          'UnionPay',
          'Interac',
          'RuPay',
          'Maestro',
          'Star',
          'Pulse',
          'Accel',
          'Nyce',
        ],
      },
      payment_method_type: {
        type: 'string',
        description: "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        enum: [
          'ach',
          'affirm',
          'afterpay_clearpay',
          'alfamart',
          'ali_pay',
          'ali_pay_hk',
          'alma',
          'amazon_pay',
          'apple_pay',
          'atome',
          'bacs',
          'bancontact_card',
          'becs',
          'benefit',
          'bizum',
          'blik',
          'boleto',
          'bca_bank_transfer',
          'bni_va',
          'bri_va',
          'card_redirect',
          'cimb_va',
          'classic',
          'credit',
          'crypto_currency',
          'cashapp',
          'dana',
          'danamon_va',
          'debit',
          'duit_now',
          'efecty',
          'eft',
          'eps',
          'fps',
          'evoucher',
          'giropay',
          'givex',
          'google_pay',
          'go_pay',
          'gcash',
          'ideal',
          'interac',
          'indomaret',
          'klarna',
          'kakao_pay',
          'local_bank_redirect',
          'mandiri_va',
          'knet',
          'mb_way',
          'mobile_pay',
          'momo',
          'momo_atm',
          'multibanco',
          'online_banking_thailand',
          'online_banking_czech_republic',
          'online_banking_finland',
          'online_banking_fpx',
          'online_banking_poland',
          'online_banking_slovakia',
          'oxxo',
          'pago_efectivo',
          'permata_bank_transfer',
          'open_banking_uk',
          'pay_bright',
          'paypal',
          'paze',
          'pix',
          'pay_safe_card',
          'przelewy24',
          'prompt_pay',
          'pse',
          'red_compra',
          'red_pagos',
          'samsung_pay',
          'sepa',
          'sepa_bank_transfer',
          'sofort',
          'swish',
          'touch_n_go',
          'trustly',
          'twint',
          'upi_collect',
          'upi_intent',
          'vipps',
          'viet_qr',
          'venmo',
          'walley',
          'we_chat_pay',
          'seven_eleven',
          'lawson',
          'mini_stop',
          'family_mart',
          'seicomart',
          'pay_easy',
          'local_bank_transfer',
          'mifinity',
          'open_banking_pis',
          'direct_carrier_billing',
          'instant_bank_transfer',
          'instant_bank_transfer_finland',
          'instant_bank_transfer_poland',
          'revolut_pay',
        ],
      },
      payment_methods_enabled: {
        type: 'object',
        description:
          'Details of all the payment methods enabled for the connector for the given merchant account',
        properties: {
          payment_method: {
            type: 'string',
            description: "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
            enum: [
              'card',
              'card_redirect',
              'pay_later',
              'wallet',
              'bank_redirect',
              'bank_transfer',
              'crypto',
              'bank_debit',
              'reward',
              'real_time_payment',
              'upi',
              'voucher',
              'gift_card',
              'open_banking',
              'mobile_payment',
            ],
          },
          payment_method_types: {
            type: 'array',
            description: 'Subtype of payment method',
            items: {
              type: 'object',
              properties: {
                payment_method_type: {
                  $ref: '#/$defs/payment_method_type',
                },
                accepted_countries: {
                  anyOf: [
                    {
                      type: 'object',
                      properties: {
                        list: {
                          type: 'array',
                          items: {
                            $ref: '#/$defs/country_alpha2',
                          },
                        },
                        type: {
                          type: 'string',
                          enum: ['enable_only'],
                        },
                      },
                      required: ['list', 'type'],
                    },
                    {
                      type: 'object',
                      properties: {
                        list: {
                          type: 'array',
                          items: {
                            $ref: '#/$defs/country_alpha2',
                          },
                        },
                        type: {
                          type: 'string',
                          enum: ['disable_only'],
                        },
                      },
                      required: ['list', 'type'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['all_accepted'],
                        },
                      },
                      required: ['type'],
                    },
                  ],
                  description:
                    'Object to filter the customer countries for which the payment method is displayed',
                },
                accepted_currencies: {
                  anyOf: [
                    {
                      type: 'object',
                      properties: {
                        list: {
                          type: 'array',
                          items: {
                            $ref: '#/$defs/currency',
                          },
                        },
                        type: {
                          type: 'string',
                          enum: ['enable_only'],
                        },
                      },
                      required: ['list', 'type'],
                    },
                    {
                      type: 'object',
                      properties: {
                        list: {
                          type: 'array',
                          items: {
                            $ref: '#/$defs/currency',
                          },
                        },
                        type: {
                          type: 'string',
                          enum: ['disable_only'],
                        },
                      },
                      required: ['list', 'type'],
                    },
                    {
                      type: 'object',
                      properties: {
                        type: {
                          type: 'string',
                          enum: ['all_accepted'],
                        },
                      },
                      required: ['type'],
                    },
                  ],
                },
                card_networks: {
                  type: 'array',
                  items: {
                    $ref: '#/$defs/card_network',
                  },
                },
                installment_payment_enabled: {
                  type: 'boolean',
                  description:
                    'Indicates whether the payment method is eligible for installment payments (e.g., EMI, BNPL). Optional.',
                },
                maximum_amount: {
                  type: 'integer',
                  description: 'This Unit struct represents MinorUnit in which core amount works',
                },
                minimum_amount: {
                  type: 'integer',
                  description: 'This Unit struct represents MinorUnit in which core amount works',
                },
                payment_experience: {
                  $ref: '#/$defs/payment_experience',
                },
                recurring_enabled: {
                  type: 'boolean',
                  description: 'Indicates whether the payment method supports recurring payments. Optional.',
                },
              },
              required: ['payment_method_type'],
            },
          },
        },
        required: ['payment_method'],
      },
      country_alpha2: {
        type: 'string',
        enum: [
          'AF',
          'AX',
          'AL',
          'DZ',
          'AS',
          'AD',
          'AO',
          'AI',
          'AQ',
          'AG',
          'AR',
          'AM',
          'AW',
          'AU',
          'AT',
          'AZ',
          'BS',
          'BH',
          'BD',
          'BB',
          'BY',
          'BE',
          'BZ',
          'BJ',
          'BM',
          'BT',
          'BO',
          'BQ',
          'BA',
          'BW',
          'BV',
          'BR',
          'IO',
          'BN',
          'BG',
          'BF',
          'BI',
          'KH',
          'CM',
          'CA',
          'CV',
          'KY',
          'CF',
          'TD',
          'CL',
          'CN',
          'CX',
          'CC',
          'CO',
          'KM',
          'CG',
          'CD',
          'CK',
          'CR',
          'CI',
          'HR',
          'CU',
          'CW',
          'CY',
          'CZ',
          'DK',
          'DJ',
          'DM',
          'DO',
          'EC',
          'EG',
          'SV',
          'GQ',
          'ER',
          'EE',
          'ET',
          'FK',
          'FO',
          'FJ',
          'FI',
          'FR',
          'GF',
          'PF',
          'TF',
          'GA',
          'GM',
          'GE',
          'DE',
          'GH',
          'GI',
          'GR',
          'GL',
          'GD',
          'GP',
          'GU',
          'GT',
          'GG',
          'GN',
          'GW',
          'GY',
          'HT',
          'HM',
          'VA',
          'HN',
          'HK',
          'HU',
          'IS',
          'IN',
          'ID',
          'IR',
          'IQ',
          'IE',
          'IM',
          'IL',
          'IT',
          'JM',
          'JP',
          'JE',
          'JO',
          'KZ',
          'KE',
          'KI',
          'KP',
          'KR',
          'KW',
          'KG',
          'LA',
          'LV',
          'LB',
          'LS',
          'LR',
          'LY',
          'LI',
          'LT',
          'LU',
          'MO',
          'MK',
          'MG',
          'MW',
          'MY',
          'MV',
          'ML',
          'MT',
          'MH',
          'MQ',
          'MR',
          'MU',
          'YT',
          'MX',
          'FM',
          'MD',
          'MC',
          'MN',
          'ME',
          'MS',
          'MA',
          'MZ',
          'MM',
          'NA',
          'NR',
          'NP',
          'NL',
          'NC',
          'NZ',
          'NI',
          'NE',
          'NG',
          'NU',
          'NF',
          'MP',
          'NO',
          'OM',
          'PK',
          'PW',
          'PS',
          'PA',
          'PG',
          'PY',
          'PE',
          'PH',
          'PN',
          'PL',
          'PT',
          'PR',
          'QA',
          'RE',
          'RO',
          'RU',
          'RW',
          'BL',
          'SH',
          'KN',
          'LC',
          'MF',
          'PM',
          'VC',
          'WS',
          'SM',
          'ST',
          'SA',
          'SN',
          'RS',
          'SC',
          'SL',
          'SG',
          'SX',
          'SK',
          'SI',
          'SB',
          'SO',
          'ZA',
          'GS',
          'SS',
          'ES',
          'LK',
          'SD',
          'SR',
          'SJ',
          'SZ',
          'SE',
          'CH',
          'SY',
          'TW',
          'TJ',
          'TZ',
          'TH',
          'TL',
          'TG',
          'TK',
          'TO',
          'TT',
          'TN',
          'TR',
          'TM',
          'TC',
          'TV',
          'UG',
          'UA',
          'AE',
          'GB',
          'UM',
          'UY',
          'UZ',
          'VU',
          'VE',
          'VN',
          'VG',
          'VI',
          'WF',
          'EH',
          'YE',
          'ZM',
          'ZW',
          'US',
        ],
      },
      currency: {
        type: 'string',
        description:
          'The three-letter ISO 4217 currency code (e.g., "USD", "EUR") for the payment amount. This field is mandatory for creating a payment.',
        enum: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTN',
          'BWP',
          'BYN',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRU',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SLE',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STD',
          'STN',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
          'ZWL',
        ],
      },
      payment_experience: {
        type: 'string',
        description: 'To indicate the type of payment experience that the customer would go through',
        enum: [
          'redirect_to_url',
          'invoke_sdk_client',
          'display_qr_code',
          'one_click',
          'link_wallet',
          'invoke_payment_app',
          'display_wait_screen',
          'collect_otp',
        ],
      },
    },
  },
};

export const handler = async (client: Hyperswitch, args: Record<string, unknown> | undefined) => {
  const { merchant_connector_id, ...body } = args as any;
  return asTextContentResult(await client.accounts.connectors.update(merchant_connector_id, body));
};

export default { metadata, tool, handler };
